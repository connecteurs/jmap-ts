// // RFC8620: JMAP-Core

// export type PatchObject = {
//   [key: string]: any;
// };

// export interface SetError {
//   type: string;
//   description?: string | null;
// }

// // Arguments for Foo/changes request
// export type ChangesArgumentsRequest = Arguments & {
//   accountId: string;
//   sinceState: string;
//   maxChanges?: number | null;
// };

// // Arguments for Foo/changes response
// export type ChangesArgumentsResponse = Arguments & {
//   accountId: string;
//   oldState: string;
//   newState: string;
//   hasMoreChanges: boolean;
//   created: string[];
//   updated: string[];
//   destroyed: string[];
// };

// // Arguments for Foo/set request
// export type SetArgumentsRequest = Arguments & {
//   accountId: string;
//   ifInState?: string | null;
//   create?: { [id: string]: Object } | null;
//   update?: { [id: string]: PatchObject } | null;
//   destroy?: string[] | null;
// };

// // Arguments for Foo/set response
// export type SetArgumentsResponse = Arguments & {
//   accountId: string;
//   oldState?: string | null;
//   newState: string;
//   created?: {
//     [id: string]: Object;
//   } | null;
//   updated?: {
//     [id: string]: Object | null;
//   } | null;
//   destroyed?: string[] | null;
//   notCreated?: {
//     [id: string]: SetError;
//   } | null;
//   notUpdated?: {
//     [id: string]: SetError;
//   } | null;
//   notDestroyed?: {
//     [id: string]: SetError;
//   } | null;
// };

// // Arguments for Foo/copy request
// export type CopyArgumentsRequest = Arguments & {
//   fromAccountId: string;
//   ifFromInState?: string | null;
//   accountId: string; // must be different to the "fromAccountId"
//   ifInState?: string | null;
//   create: {
//     [id: string]: Object & { id: string };
//   };
//   onSuccessDestroyOriginal?: boolean; // default: false
//   destroyFromIfInState?: string | null;
// };

// // Arguments for Foo/copy response
// export type CopyArgumentsResponse = Arguments & {
//   fromAccountId: string;
//   accountId: string;
//   oldState?: string | null;
//   newState: string;
//   created?: {
//     [id: string]: Object;
//   } | null;
//   notCreated?: {
//     [id: string]: SetError;
//   } | null;
// };

// // Arguments for Foo/query request
// export type QueryArgumentsRequest = Arguments & {
//   accountId: string;
//   filter?: FilterOperator | FilterCondition | null;
//   sort?: Comparator[] | null;
//   position?: number; // default: 0
//   anchor?: string | null;
//   anchorOffset?: number; // default: 0
//   limit?: number | null;
//   calculateTotal?: boolean; // default: false
// };

// // Arguments for Foo/query response
// export type QueryArgumentsResponse = Arguments & {
//   accountId: string;
//   queryState: string;
//   canCalculateChanges: boolean;
//   position: number;
//   ids: string[];
//   total?: number; // only if requested
//   limit?: number; // if set by the server
// };

// // Arguments for Foo/queryChanges request
// export type QueryChangesArgumentsRequest = Arguments & {
//   accountId: string;
//   filter?: FilterOperator | FilterCondition | null;
//   sort?: Comparator[] | null;
//   sinceQueryState: string;
//   maxChanges?: number | null;
//   upToId?: string | null;
//   calculateTotal?: boolean; // default: false
// };

// export type AddedItem = {
//   id: string;
//   index: number;
// };

// // Arguments for Foo/queryChanges response
// export type QueryChangesArgumentsResponse = Arguments & {
//   accountId: string;
//   oldQueryState: string;
//   newQueryState: string;
//   total?: number; // only if requested
//   removed: string[];
//   added: AddedItem[];
// };

// // Request-Level Errors (RFC7807)
// export interface ProblemDetails {
//   type?: string; // A URI reference RFC3986 that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML W3C.REC-html5-20141028). When this member is not present, its value is assumed to be "about:blank".
//   title?: string; // A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see RFC7231, Section 3.4).
//   status?: number; // The HTTP status code (RFC7231, Section 6) generated by the origin server for this occurrence of the problem.
//   detail?: string; // A human-readable explanation specific to this occurrence of the problem.
//   instance?: string; // A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
// }

// // Method-Level Errors
// export interface InvocationErrorArgs {
//   type: string;
//   [key: string]: any;
// }
// export type InvocationError = Invocation<"error", InvocationErrorArgs>;

// export interface ResultReference {
//   resultOf: string;
//   name: string;
//   path: string;
// }

// export interface BinaryDataUploadResponse {
//   accountId: string;
//   blobId: string;
//   type: string;
//   size: number;
// }

// // Arguments for Blob/copy request
// export type BlobCopyArgumentsRequest = Arguments & {
//   fromAccountId: string;
//   accountId: string;
//   blobIds: string[];
//   properties?: string[] | null;
// };

// // Arguments for Blob/copy response
// export type BlobCopyArgumentsResponse = Arguments & {
//   fromAccountId: string;
//   accountId: string;
//   copied?: {
//     [id: string]: string;
//   } | null;
//   notCopied?: {
//     [id: string]: SetError;
//   } | null;
// };

// export type TypeState = {
//   [typeName: string]: string;
// };

// export interface StateChange {
//   "@type": "StateChange";
//   changed: {
//     [id: string]: TypeState;
//   };
// }

// export interface PushSubscription {
//   id: string;
//   deviceClientId: string;
//   url: string;
//   keys?: { p256dh: string; auth: string } | null;
//   verificationCode?: string | null;
//   expires?: Date | null;
//   types?: string[] | null;
// }

// // Arguments for PushSubscription/get request
// export type GetPushSubscriptionArgumentsRequest = GetArgumentsRequest & {
//   accountId: never;
// };

// // Arguments for PushSubscription/get response
// export type GetPushSubscriptionArgumentsResponse = GetArgumentsResponse & {
//   accountId: never;
//   state: never;
//   list: PushSubscription & { url: never; keys: never }[];
// };

// // Arguments for PushSubscription/set request
// export type SetPushSubscriptionArgumentsRequest = SetArgumentsRequest & {
//   accountId: never;
//   ifInState: never;
// };

// // Arguments for PushSubscription/set response
// export type SetPushSubscriptionArgumentsResponse = SetArgumentsResponse & {
//   accountId: never;
//   oldState: never;
//   newState: never;
// };

export const makeTSHappy = true;
